# -*- coding: utf-8 -*-
"""example_S_errEo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AJ3vq0Rl0n8NP6OSJOipXGpVFbpakK5x
"""

from google.colab import drive
drive.mount('/content/drive/')

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install netcdf4
# !pip install geopandas

import xarray as xr
import numpy as np

# Define time
year_i=1981
month_i=1
day_i=5

path_netcd_01 = "/content/drive/MyDrive/DATA_FT/version_rc/"

delta_daily = xr.open_dataset(path_netcd_01+"delta/daily/delta_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
gamma_daily = xr.open_dataset(path_netcd_01+"gamma/gamma.nc")
ws_daily = xr.open_dataset(path_netcd_01+"/ws/normal/ws_mean.nc").isel(time=month_i-1)
var_min = xr.open_dataset("/content/drive/MyDrive/variables_min_clim/var_min_clim.nc") 
ea_daily = xr.open_dataset(path_netcd_01+"ea/daily/ea_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
es_daily = xr.open_dataset(path_netcd_01+"es/daily/es_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
tmax_daily = xr.open_dataset(path_netcd_01+"tmax/daily/tmax_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
tmin_daily = xr.open_dataset(path_netcd_01+"tmin/daily/tmin_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")  
rn_daily = xr.open_dataset(path_netcd_01+"rn/daily/rn_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")      
eo_daily = xr.open_dataset(path_netcd_01+"eo/daily/eo_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")

"""## S_Tmax"""

# Equation
def S_tmax(DELTA_i, GAMMA_i, ws_i, ea_i, es_i, tmax_i, tmax_min, tmin_i, eo_i):
  d_tmax_d_eo = (-450*GAMMA_i*ws_i*(-ea_i+es_i))/((DELTA_i+GAMMA_i*(0.34*ws_i+1))*(np.power((tmin_i/2 + tmax_i/2 + 273), 2)))
  #response = d_tmax_d_eo * ((tmax_i - tmax_min)/eo_i)
  response = d_tmax_d_eo * ((tmax_i)/eo_i)
  return np.round(response, 2)

Stmax = xr.apply_ufunc(S_tmax,
                       delta_daily.isel(time=day_i).delta,
                       gamma_daily.gamma,
                       ws_daily.ws,
                       ea_daily.isel(time=day_i).ea,
                       es_daily.isel(time=day_i).es,
                       tmax_daily.isel(time=day_i).tmax,
                       var_min.tmax,
                       tmin_daily.isel(time=day_i).tmin,
                       eo_daily.isel(time=day_i).eo,
                       output_dtypes=['float32'],
                       vectorize=True)

# S
Stmax.plot()

# S*
Stmax.plot()

"""## S_Tmin"""

# Equation
def S_tmin(DELTA_i, GAMMA_i, ws_i, ea_i, es_i, tmax_i, tmin_i, tmin_min, eo_i):
  d_tmin_d_eo = (-450*GAMMA_i*ws_i*(-ea_i+es_i))/((DELTA_i+GAMMA_i*(0.34*ws_i+1))*(np.power((tmax_i/2 + tmin_i/2 + 273), 2)))
  #response = d_tmin_d_eo * ((tmin_i - tmin_min)/eo_i)
  response = d_tmin_d_eo * ((tmin_i)/eo_i)
  return np.round(response, 2)

Stmin = xr.apply_ufunc(S_tmin,
                       delta_daily.isel(time=day_i).delta,
                       gamma_daily.gamma,
                       ws_daily.ws,
                       ea_daily.isel(time=day_i).ea,
                       es_daily.isel(time=day_i).es,
                       tmax_daily.isel(time=day_i).tmax,
                       tmin_daily.isel(time=day_i).tmin,
                       var_min.tmin,
                       eo_daily.isel(time=day_i).eo,
                       output_dtypes=['float32'],
                       vectorize=True)

# S
Stmin.plot()

# S*
Stmin.plot()

"""## S_ea"""

# Equation
def S_ea(DELTA_i, GAMMA_i, ws_i, ea_i, ea_min, tmax_i, tmin_i, eo_i):
  d_ea_d_eo = (-900*GAMMA_i*ws_i)/((DELTA_i+GAMMA_i*(0.34*ws_i+1))*(tmax_i/2 + tmin_i/2 + 273))
  #response = d_ea_d_eo * ((ea_i - ea_min)/eo_i)
  response = d_ea_d_eo * ((ea_i )/eo_i)
  return np.round(response, 2)

Sea = xr.apply_ufunc(S_ea,
                     delta_daily.isel(time=day_i).delta,
                     gamma_daily.gamma,
                     ws_daily.ws,
                     ea_daily.isel(time=day_i).ea,
                     var_min.ea,
                     tmax_daily.isel(time=day_i).tmax,
                     tmin_daily.isel(time=day_i).tmin,
                     eo_daily.isel(time=day_i).eo,
                     vectorize=True,
                     output_dtypes=['float32'])

# S
Sea.plot()

# S*
Sea.plot()

"""## S_rn"""

# Equation
def S_rn(DELTA_i, GAMMA_i, ws_i, rn_i, rn_min, eo_i):
  d_rn_d_eo = (0.408*DELTA_i)/(DELTA_i+GAMMA_i*(0.34*ws_i+1))
  #response = d_rn_d_eo * ((rn_i - rn_min)/eo_i)
  response = d_rn_d_eo * ((rn_i )/eo_i)
  return np.round(response, 2)

Srn = xr.apply_ufunc(S_rn,
                     delta_daily.isel(time=day_i).delta,
                     gamma_daily.gamma,
                     ws_daily.ws,
                     rn_daily.isel(time=day_i).rn,
                     var_min.rn,
                     eo_daily.isel(time=day_i).eo,
                     vectorize=True,
                     output_dtypes=['float32'])

# S
Srn.plot()

# S*
Srn.plot()

"""## S_ws"""

# Equation
def S_ws(DELTA_i, GAMMA_i, ws_i, ws_min, ea_i, es_i, tmax_i, tmin_i,rn_i, eo_i):
  d_ws_d_eo = ((900*GAMMA_i*(-ea_i+es_i))/((DELTA_i+GAMMA_i*(0.34*ws_i+1))*(tmax_i/2+tmin_i/2+273)))-(0.34*GAMMA_i*(0.408*DELTA_i*(rn_i)+((900*GAMMA_i*ws_i*(-ea_i+es_i))/(tmax_i/2+tmin_i/2+273)))/(np.power((DELTA_i+GAMMA_i*(0.34*ws_i+1)),2)))
  #response = d_ws_d_eo * ((ws_i - ws_min)/eo_i)
  response = d_ws_d_eo * ((ws_i )/eo_i)
  return np.round(response, 2)

Sws = xr.apply_ufunc(S_ws,
                     delta_daily.isel(time=day_i).delta,
                     gamma_daily.gamma,
                     ws_daily.ws,
                     var_min.ws,
                     ea_daily.isel(time=day_i).ea,
                     es_daily.isel(time=day_i).es,
                     tmax_daily.isel(time=day_i).tmax,
                     tmin_daily.isel(time=day_i).tmin,
                     rn_daily.isel(time=day_i).rn,
                     eo_daily.isel(time=day_i).eo,
                     vectorize=True,
                     output_dtypes=['float32'])

# S
Sws.plot()

# S*
Sws.plot()

"""## Err Eo"""

# uncertainty
err_Eo = eo_daily.isel(time=5).eo*(Stmax + Stmin + Sea + Srn + Sws)

err_Eo.plot()

