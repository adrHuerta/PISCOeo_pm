# -*- coding: utf-8 -*-
"""figures_spatial_variability_Deo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iIPvj5TkC6uq-facfocsRT8OK-TXN41v
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install geopandas
# !pip install rioxarray

import rioxarray
import xarray as xr
import pandas as pd
from geopandas import read_file as gpd_read_file
from numpy import isnan as np_isnan
import numpy as np
import matplotlib.pyplot as plt

path_save_file ="/content/drive/MyDrive/Deo_clim/"

xr.open_dataset(path_save_file+"Deo_annual_mean_clim.nc")

Deo_annual_var_mean= xr.open_dataset(path_save_file+"Deo_annual_mean_clim.nc")
Deo_annual_var_mean= Deo_annual_var_mean.assign_coords(time="01").expand_dims("time")

shp_Peru = gpd_read_file('/content/drive/MyDrive/shapes_colab/SEC_CLIM.shp')
shp_Peru = shp_Peru.dissolve(by="MAC_REG")

# required functions
def xr_crop(shp_i, netcdf_i):
  # get box
  box_i = shp_i.total_bounds
  
  # crop based on box
  crop_netcdf_i = netcdf_i.where((netcdf_i["longitude"] > box_i[0]) & # min lon
                                 (netcdf_i["longitude"] < box_i[2]) & # max lon
                                 (netcdf_i["latitude"] > box_i[1]) & # min lat
                                 (netcdf_i["latitude"] < box_i[3]), # max lat
                                 drop = True)
  
  return crop_netcdf_i

def xr_shp_to_grid(shp_i, netcdf_array):

  # get real box
  shp_i_geometry = shp_i.geometry

  # adding crs
  mask = netcdf_array.rio.set_crs(shp_i.crs)

  # "rasterizing"
  mask = mask.rio.clip(shp_i_geometry, drop = False)

  # making "True/False" values
  mask.values[~np_isnan(mask.values)] = 1

  return mask.drop([ "time","spatial_ref"])

def xr_mask(grid_mask, netcdf_i):

  # masking
  mask_netcdf_i = netcdf_i.where(grid_mask == True)

  return mask_netcdf_i

def ext_mask(netcdf_file, shape, variable):
    netcdf_cropped = xr_crop(shp_i = shape, 
                         netcdf_i = netcdf_file)
    shp_exp_grid = xr_shp_to_grid(shp_i = shape, 
                              netcdf_array = netcdf_cropped.isel(time=0)[variable])
    netcdf_masked = xr_mask(grid_mask = shp_exp_grid,
                              netcdf_i = netcdf_cropped)
    return netcdf_masked

"""### Figure: Mean annual average of Deo"""

Deo_annual_var_mean.where(Deo_annual_var_mean.Deo >= 0).Deo.plot()

fig, ax1 = plt.subplots(figsize=(7, 7), dpi = 100)

ext_mask(Deo_annual_var_mean.where(Deo_annual_var_mean.Deo >= 0),shp_Peru,"Deo").Deo.plot(ax = ax1, vmin = 0,
                                levels = [0, .5, 1.0, 1.5, 2], cmap = "hot_r")
shp_Peru.geometry.boundary.plot(ax = ax1, edgecolor = "black", linewidth = .15)
ax1.axis('off')
ax1.set_title('')

plt.savefig(path_save_file + 'Deo_spatial_variability.png')

"""### Table: Mean anual average of Deo for each Climate Zone """

Deo_annual_clim = []
  
for reg in range(0,5) :
    Reg_S = ext_mask(Deo_annual_var_mean,shp_Peru.iloc[[reg]],"Deo")
    Reg_S = Reg_S.mean(dim=["latitude", "longitude"]).to_dataframe()
    Deo_annual_clim.append(Reg_S) 
Deo_annual_clim=pd.concat( Deo_annual_clim, axis=1)
Deo_annual_clim.columns = ['CO', 'SEA', 'SEB', 'SIOC', 'SIOR']
Deo_annual_clim.index = ["Deo"]

Deo_annual_clim

