# -*- coding: utf-8 -*-
"""S_tmin.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1phD5TepVlmHqY15Lwl4SGsgpVd2LoSQD
"""

from google.colab import drive
drive.mount('/content/drive/')

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install netcdf4
# !pip install geopandas

import xarray as xr
import numpy as np

# Equation
def S_tmin(DELTA_i, GAMMA_i, ws_i, ea_i, es_i, tmax_i, tmin_i, tmin_min, eo_i):
  d_tmin_d_eo = (-450*GAMMA_i*ws_i*(-ea_i+es_i))/((DELTA_i+GAMMA_i*(0.34*ws_i+1))*(np.power(( tmin_i/2 + tmax_i/2 +273), 2)))
  response = d_tmin_d_eo * ((tmin_i - tmin_min)/eo_i)
  return np.round(response, 2)

"""
# Equation
def D_tmin(DELTA_i, GAMMA_i, ws_i, ea_i, es_i, tmax_i, tmin_i):
  d_tmin_d_eo = (-450*GAMMA_i*ws_i*(-ea_i+es_i))/((DELTA_i+GAMMA_i*(0.34*ws_i+1))*(np.power(( tmin_i/2 + tmax_i/2 +273), 2)))
  #response = d_tmin_d_eo * ((tmin_i - tmin_min)/eo_i)
  return np.round(d_tmin_d_eo, 2)
"""

path_netcd_01 = "/content/drive/MyDrive/DATA_FT/version_rc/"

for year_i in range(2010,2017):
  for month_i in range(1, 13):

    delta_daily = xr.open_dataset(path_netcd_01+"delta/daily/delta_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    gamma_daily = xr.open_dataset(path_netcd_01+"gamma/gamma.nc")
    ws_daily = xr.open_dataset(path_netcd_01+"/ws/normal/ws_mean.nc").isel(time=month_i-1)
    ea_daily = xr.open_dataset(path_netcd_01+"ea/daily/ea_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    es_daily = xr.open_dataset(path_netcd_01+"es/daily/es_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    tmax_daily = xr.open_dataset(path_netcd_01+"tmax/daily/tmax_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    tmin_daily = xr.open_dataset(path_netcd_01+"tmin/daily/tmin_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")  
    tmin_min = xr.open_dataset("/content/drive/MyDrive/variables_min_clim/var_min_clim.nc")  
    eo_daily = xr.open_dataset(path_netcd_01+"eo/daily/eo_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")

    Stmin = xr.apply_ufunc(S_tmin,
                           delta_daily.delta,
                           gamma_daily.gamma,
                           ws_daily.ws,
                           ea_daily.ea,
                           es_daily.es,
                           tmax_daily.tmax,
                           tmin_daily.tmin,
                           tmin_min.tmin,
                           eo_daily.eo,
                           input_core_dims=[['time'], [], [], ["time"], ["time"], ["time"], ["time"], [],  ["time"]],
                           output_core_dims=[["time"]],
                           vectorize=True,
                           output_dtypes=['float32'])
    
    encoding = {v: {'zlib': True, 'complevel': 9} for v in ["Stmin"]}
    Stmin.to_dataset(name="Stmin").to_netcdf(path_netcd_01+"S/Stmin/Stmin_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc", encoding=encoding, engine='netcdf4')

"""
for year_i in range(1981,1982):
  for month_i in range(1, 2):

    delta_daily = xr.open_dataset(path_netcd_01+"delta/daily/delta_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    gamma_daily = xr.open_dataset(path_netcd_01+"gamma/gamma.nc")
    ws_daily = xr.open_dataset(path_netcd_01+"/ws/normal/ws_mean.nc").isel(time=month_i-1)
    ea_daily = xr.open_dataset(path_netcd_01+"ea/daily/ea_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    es_daily = xr.open_dataset(path_netcd_01+"es/daily/es_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    tmax_daily = xr.open_dataset(path_netcd_01+"tmax/daily/tmax_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")
    tmin_daily = xr.open_dataset(path_netcd_01+"tmin/daily/tmin_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc")  
    
    Dtmin = xr.apply_ufunc(D_tmin,
                           delta_daily.delta,
                           gamma_daily.gamma,
                           ws_daily.ws,
                           ea_daily.ea,
                           es_daily.es,
                           tmax_daily.tmax,
                           tmin_daily.tmin,
                           input_core_dims=[['time'], [], [], ["time"], ["time"], ["time"], ["time"]],
                           output_core_dims=[["time"]],
                           vectorize=True,
                           output_dtypes=['float32'])
    
    encoding = {v: {'zlib': True, 'complevel': 9} for v in ["Dtmin"]}
    Dtmin.to_dataset(name="Dtmin").to_netcdf(path_netcd_01+"D/Dtmin/Dtmin_daily"+"_"+str(year_i)+ "_"+str(month_i).zfill(2)+".nc", encoding=encoding, engine='netcdf4')
"""

